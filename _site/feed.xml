<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coping with Code</title>
    <description></description>
    <link>http://blog.boushley.net/</link>
    <atom:link href="http://blog.boushley.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Mar 2016 14:02:33 -0800</pubDate>
    <lastBuildDate>Tue, 01 Mar 2016 14:02:33 -0800</lastBuildDate>
    <generator>Jekyll v3.0.3</generator>
    
      <item>
        <title>Web Apps Without Servers - Update</title>
        <description>&lt;h2 id=&quot;serverless-update&quot;&gt;Serverless Update&lt;/h2&gt;
&lt;p&gt;In my last set of posts back in October I talked about the serverless architecture and how it had so much potential to
change the way we build web apps. It turns out that potential has only gotten greater!&lt;/p&gt;

&lt;h3 id=&quot;redirects&quot;&gt;Redirects&lt;/h3&gt;
&lt;p&gt;Back in October there was a glaring hole in the API Gateway mapping templates. That was that you couldn’t use a value
from the Lambda response to fill in a header in your response template. Luckily &lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?threadID=216264&quot;&gt;back in December&lt;/a&gt;
support for this was added to API Gateway.&lt;/p&gt;

&lt;p&gt;This means that no we can set headers in our responses from AWS Lambda. Suddenly redirects are no longer something you
have to hack your way around.&lt;/p&gt;

&lt;h3 id=&quot;cookies&quot;&gt;Cookies&lt;/h3&gt;
&lt;p&gt;Setting cookies was a pretty big missing piece too. As it turns out this is enabled by the same functionality that 
enabled redirects. Since we can now set response headers based on Lambda return values we can now set the &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie&lt;/code&gt; 
header enabling cookies!&lt;/p&gt;

&lt;p&gt;There is one drawback here. Unfortunately we cannot set more than one cookie per request. There is no way to send 
multiples of the same header as would be required for setting multiple cookies.&lt;/p&gt;

&lt;h3 id=&quot;serverless-the-future-is-bright&quot;&gt;Serverless, the future is bright&lt;/h3&gt;
&lt;p&gt;Serverless has reached a point of maturity where we can use it as a serious contender. The ecosystem is still sparse, 
but the &lt;a href=&quot;http://serverless.com&quot;&gt;Serverless&lt;/a&gt; startup is working to fix that.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 18:03:52 -0800</pubDate>
        <link>http://blog.boushley.net/2016/02/29/serverless-architecture-update/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2016/02/29/serverless-architecture-update/</guid>
        
        
        <category>js</category>
        
        <category>AWS</category>
        
        <category>Serverless</category>
        
      </item>
    
      <item>
        <title>HTML5 Style Deep Linking on S3</title>
        <description>&lt;h2 id=&quot;the-want&quot;&gt;The Want&lt;/h2&gt;
&lt;p&gt;In my last post I talked about running a Single Page Application using &lt;a href=&quot;/2015/10/03/web-apps-without-servers/&quot;&gt;JAWS and Amazon S3&lt;/a&gt;.
One of my first questions after getting that working was how I might be able to support deep linking. Specifically how 
might I be able to handle HTML 5 style deep linking. &lt;a href=&quot;http://caniuse.com/#feat=history&quot;&gt;History Management (e.g. pushState)&lt;/a&gt;
has pretty good browser support and the new style URLs look much cleaner, so in new projects this is the way I like to 
go.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Usually to support the new style URLs you need a backend server that can dynamically render the same routes that the 
front end is rendering dynamically. And when we’re hosting a site on S3 we don’t have that capability. We are very much 
hosting a static site, no frills.&lt;/p&gt;

&lt;p&gt;For a while I thought I was stuck. I didn’t see how I could have those nice URLs and still support sharing links or even 
just browser refreshes. If you refreshed the browser on some page other than the index (like /foo/bar) you get the nasty 
S3 Key Not Found screen.&lt;/p&gt;

&lt;h2 id=&quot;the-ray-of-light&quot;&gt;The Ray of Light&lt;/h2&gt;
&lt;p&gt;I could at least be sure the S3 Key Not Found / 404 page was a nice page… then it hit me! What if we just tell S3 to 
serve our Single Page App as the error page?&lt;/p&gt;

&lt;p&gt;I hopped into the S3 console and changed the configuration on my bucket. When enabling website hosting for an S3 bucket 
you can also set the “Index Document” and “Error Document”. So on my bucket I configured both documents to be 
&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. The result is that my page loads whenever you go to a non-existent route.&lt;/p&gt;

&lt;p&gt;This means that when you arrive at &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; initially you load the application as expected. As you navigate around the URL 
updates. If you hit refresh you are served a 404, but the application loads recognizes the URL and renders the page you 
expect. The only way you can tell it’s a 404 is if you open up your tools and look at the Status Code.&lt;/p&gt;

&lt;p&gt;This works amazingly well, you can see it in action &lt;a href=&quot;http://s3-static-test.s3-website-us-west-2.amazonaws.com/&quot;&gt;here&lt;/a&gt;.
(That gif is so mesmerizing, I’ve spent far too long watching that thing loop…)&lt;/p&gt;

&lt;h2 id=&quot;so-what-about-actual-unknown-pages&quot;&gt;So what about actual unknown pages?&lt;/h2&gt;
&lt;p&gt;This presented one other oddity, what about actual 404s? The solution I came up with was to just handle those 404s in 
the Single Page Application itself. So the same application still loads, but since the application doesn’t &lt;a href=&quot;http://s3-static-test.s3-website-us-west-2.amazonaws.com/this/page/is/not/real&quot;&gt;recognize the 
URL&lt;/a&gt; it shows an error screen.&lt;/p&gt;

&lt;h2 id=&quot;serverless&quot;&gt;Serverless&lt;/h2&gt;
&lt;p&gt;Running servers is quickly becoming something you should outsource to the experts. There will be oddities along the way 
(like serving an HTTP 404 when the URL is actually fine), but the wins you get from completely washing your hands of any 
infrastructure management are huge!&lt;/p&gt;

&lt;p&gt;I’m sure this approach will offend some peoples sensibilities, but it’s amazing to see how much can be done without 
needing to maintain your own servers.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Oct 2015 19:03:52 -0700</pubDate>
        <link>http://blog.boushley.net/2015/10/28/html5-deep-link-on-amazon-s3/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2015/10/28/html5-deep-link-on-amazon-s3/</guid>
        
        
        <category>js</category>
        
        <category>AWS</category>
        
        <category>Serverless</category>
        
      </item>
    
      <item>
        <title>Web Applications Without Servers</title>
        <description>&lt;h2 id=&quot;web-applications-using-just-aws-without-servers&quot;&gt;Web Applications using Just AWS Without Servers&lt;/h2&gt;
&lt;p&gt;In my &lt;a href=&quot;/2015/10/02/serverless-architecture-with-jaws/&quot;&gt;last post&lt;/a&gt; I discussed the basics of &lt;a href=&quot;need link&quot;&gt;JAWS&lt;/a&gt; a tool 
enabling serverless architectures on AWS. In this post we’ll talk about how you can add a few more key AWS services and 
end up with a complete monstrously scalable Web Application without any servers and &lt;em&gt;it’s cheap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The combination we talked about last time works for your API, and for some applications that’s all they need to host. 
But this is about web applications, and for those there’s a load of static content you need to host. On top of needing 
to host these static assets somewhere, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;
means that if your static assets are on a different domain from your API, you have to deal with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;CORS&lt;/a&gt;
which can be a big pain.&lt;/p&gt;

&lt;p&gt;Today I’ll show you how to host your web application without any servers using JAWS, Amazon S3 and CloudFront, using a 
single domain / origin.&lt;/p&gt;

&lt;h2 id=&quot;the-pieces&quot;&gt;The Pieces&lt;/h2&gt;

&lt;h3 id=&quot;review&quot;&gt;Review&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; lets you provide piece of code and AWS will run that code in response to
events. They take care of running that code as much or as little as necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/api-gateway/&quot;&gt;Amazon API Gateway&lt;/a&gt; is a service proxy, with the key benefit of translating HTTP 
Requests to AWS events that Lambda can process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jaws-framework/JAWS&quot;&gt;JAWS&lt;/a&gt; is an open source project that automates the setup of Amazon API Gateway 
endpoints and Lambda functions.&lt;/p&gt;

&lt;h3 id=&quot;the-new-pieces&quot;&gt;The new Pieces&lt;/h3&gt;

&lt;h4 id=&quot;amazon-s3&quot;&gt;Amazon S3&lt;/h4&gt;
&lt;p&gt;One of the oldest Amazon services &lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt; is for storing files in a highly available and extremely
redundant manner. S3 supports &lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html&quot;&gt;hosting static websites&lt;/a&gt; today.
We’ll be using this functionality and teaming it up with JAWS.&lt;/p&gt;

&lt;h4 id=&quot;amazon-cloudfront&quot;&gt;Amazon CloudFront&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;Amazon CloudFront&lt;/a&gt; is the AWS CDN. It is highly configurable, and works well using 
Amazon S3 as an &lt;a href=&quot;http://docs.aws.amazon.com/general/latest/gr/glos-chap.html#originserver&quot;&gt;origin server&lt;/a&gt;. CloudFront 
also allows routing between multiple origin servers based on &lt;a href=&quot;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachebehavior.html&quot;&gt;CacheBehaviors&lt;/a&gt;.
Which is a fancy way of saying that CloudFront lets you route traffic between different backends based on the path of 
the request.&lt;/p&gt;

&lt;h2 id=&quot;alright-lets-bring-it-together&quot;&gt;Alright, let’s bring it together&lt;/h2&gt;
&lt;p&gt;First we need to have our static assets hosted in S3. Setup S3 static website hosting, and be sure that this works by 
visiting the URL that the S3 console gives you for your page.&lt;/p&gt;

&lt;p&gt;Next we need to setup our API Gateway endpoints. To get these to be easily grouped on our CloudFront distribution we 
should prefix all of these routes with a common path, like &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/&lt;/code&gt;. JAWS makes it easy to create API Gateway endpoints 
that are backed by Lambda services. Get one of those setup and test it with something like curl to be sure it works as
expected.&lt;/p&gt;

&lt;p&gt;Finally we bring it all together with a CloudFront distribution with two origins. The first (default) origin is our S3
bucket, then we add our API Gateway endpoint as our second origin. The base path that we set on the API gateway origin
is best to set to your API Gateway stage. Finally we can setup a Cache Behavior that routes traffic for a specific set
of routes, like &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/*&lt;/code&gt; (the prefix we used when setting up our API Gateway endpoint) to our API Gateway origin.&lt;/p&gt;

&lt;h2 id=&quot;manual-configuration-can-we-automate-that&quot;&gt;Manual configuration! Can we automate that?&lt;/h2&gt;
&lt;p&gt;Indeed, we can make this part of our JAWS resources CloudFormation template. Luckily JAWS is extensible using
&lt;a href=&quot;https://github.com/awsm-org/awsm&quot;&gt;awsm modules&lt;/a&gt; and I wrote the &lt;a href=&quot;https://github.com/boushley/awsm-cloudfront&quot;&gt;awsm cloudfront&lt;/a&gt;
module that contains a CloudFormation resource definition that automates most of this setup. At the time of writing there are some
manual steps where you have to modify the CloudFormation template to fill in your S3 bucket and API Gateway endpoint, but there
are &lt;a href=&quot;https://github.com/awsm-org/awsm/issues/2&quot;&gt;extensions&lt;/a&gt; to the awsm module format that would make that more automated.&lt;/p&gt;

&lt;h2 id=&quot;drawbacks&quot;&gt;Drawbacks&lt;/h2&gt;
&lt;p&gt;There are lots &lt;a href=&quot;https://github.com/boushley/awsm-cloudfront#watch-your-paths&quot;&gt;paths&lt;/a&gt; involved here and they
can get confusing, so keep an eye on that.&lt;/p&gt;

&lt;p&gt;There are also some missing features in API Gateway. One of these missing features is the ability to &lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?messageID=675607&quot;&gt;dynamically set 
headers on the HTTP response&lt;/a&gt; based on values in the Lambda
event response. This is necessary for setting cookies or performing a HTTP redirect, which require setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cookie&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; header respectively. Another missing feature is the ability to set the HTTP Status Code based on something
in the Lambda event response. This makes something like OAuth a pain to implement, however it’s definitely doable.&lt;/p&gt;

&lt;p&gt;I’ve heard of a few other drawbacks, but none of them are show stoppers. There are bumps on this road, but it’s a pretty 
amazing setup without much of the common frustrations.&lt;/p&gt;

&lt;h2 id=&quot;this-is-an-exciting-time&quot;&gt;This is an exciting time&lt;/h2&gt;
&lt;p&gt;This is amazing! Previously to host a web application with an API in a robust manner was fairly costly either in money 
or time (and often in both). This system makes it cheap and relatively simple to setup and deploy a web application. 
Even more once you’ve got that application deployed it scales well beyond many standard web application architectures 
without getting any more complex.&lt;/p&gt;

&lt;p&gt;Keep an eye on JAWS and the serverless architecture, this could be huge!&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Oct 2015 07:03:52 -0700</pubDate>
        <link>http://blog.boushley.net/2015/10/03/web-apps-without-servers/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2015/10/03/web-apps-without-servers/</guid>
        
        
        <category>js</category>
        
        <category>JAWS</category>
        
        <category>AWS</category>
        
      </item>
    
      <item>
        <title>Serverless Architecture with JAWS</title>
        <description>&lt;h2 id=&quot;where-were-going-we-dont-need-sroadss-servers&quot;&gt;Where we’re going, we don’t need &lt;s&gt;roads&lt;/s&gt; servers.&lt;/h2&gt;
&lt;p&gt;With the recent-ish release of &lt;a href=&quot;https://aws.amazon.com/api-gateway/&quot;&gt;Amazon API Gateway&lt;/a&gt; AWS now has everything you need for a serverless 
architecture. Depending on how you work this should sound like the coolest thing ever, or the scariest thing ever. In 
its current state this architecture does not fit every use case, but even as such an early technology it is applicable to 
an amazing range of projects.&lt;/p&gt;

&lt;h2 id=&quot;the-pieces&quot;&gt;The Pieces&lt;/h2&gt;

&lt;h4 id=&quot;aws-lambda&quot;&gt;AWS Lambda&lt;/h4&gt;
&lt;p&gt;Last year Amazon announced &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; in a preview form, and earlier this year they release Lambda as a production service. 
Lambda is a dramatic shift in the way things run on AWS. Lambda charges for compute time in 100ms intervals. You provide 
a piece of code and AWS will run that code in response to events.&lt;/p&gt;

&lt;p&gt;This is really interesting because you don’t need to have a server always ready to take requests. You don’t need to 
worry about scaling your servers with demand. Events come in and your code processes them, that’s all you have to worry 
about. AWS scales up their infrastructure as needed and will run as many simultaneous instances of your code as 
necessary.&lt;/p&gt;

&lt;p&gt;Alright, so Lambda can respond to events, and to start these were things like SNS triggers, S3 upload notification, 
Kinesis processing, but then it all changed.&lt;/p&gt;

&lt;h4 id=&quot;amazon-api-gateway&quot;&gt;Amazon API Gateway&lt;/h4&gt;
&lt;p&gt;Then in the middle of this year Amazon launched Amazon API Gateway. This service lets you offload much of the heavy 
lifting around making an API production ready (DDoS shedding, Environment Differentiation, etc.) sells it. However the 
most important thing API Gateway enables is the translation of HTTP Requests into an &lt;strong&gt;event&lt;/strong&gt; and the translation of 
the Lambda response back into an HTTP Response.&lt;/p&gt;

&lt;p&gt;Now you can stand up your API endpoints using API Gateway and then use Lambda to perform the backend processing. Setting 
up a proof of concept around this is pretty straightforward, especially since the AWS Lambda console has a helper that 
creates an API Gateway endpoint in front of your service. However there are a lot of moving parts in this, and things 
start to get messy, fast.&lt;/p&gt;

&lt;h4 id=&quot;jawshttpsgithubcomjaws-frameworkjaws&quot;&gt;&lt;a href=&quot;https://github.com/jaws-framework/JAWS&quot;&gt;JAWS&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;JAWS (standing for Just AWS Without Servers) is an open source project that automates the setup of Amazon API Gateway 
endpoints and Lambda functions. It handles environment variables, cross-region replication, and multiple stages. The 
patterns and best practices JAWS recommends also encourage writing your code in a testable, AWS independent manner.&lt;/p&gt;

&lt;h2 id=&quot;so-what&quot;&gt;So What?&lt;/h2&gt;
&lt;p&gt;It’s definitely interesting that you can hook up these services to make something that behaves the same as the servers 
we’ve used for years, but why should you care? Why should we bother learning this new way of doing things?&lt;/p&gt;

&lt;p&gt;Running a service with moderate load, like 16,000 request/day at an average of 200ms would often require you to stand up 
at least two servers (more if you want truly high availability), if those servers are the common c3.large that’s going 
to cost you $2.97/day (assuming 1 year up front payment). If you can run on an m3.medium that drops to $0.97. Running 
AWS Lambda will cost just $0.05/day. If you include the cost of API Gateway that goes up to about $1.80/day, but the raw 
EC2 instance calculations don’t include the prices of an ELB ($0.60/day) or some service to handle DDoS shedding. So 
cost is definitely a reason to consider this new architecture.&lt;/p&gt;

&lt;p&gt;However cost isn’t the only reason. One of the beauties of this setup is that it scales to extremely large services as 
well. If you get a huge burst of traffic from a Hacker News or Reddit front page this setup isn’t going to fall over. 
This setup isn’t going to require minutes for more EC2 instances to turn on. Lambda handles scaling for you, and you 
continue running your setup at peak efficiency. Most architectures out there require you to choose developer 
productivity or scalability. With JAWS you no longer have to choose, you can easily get a service started and it will 
continue to handle your traffic as your site grows.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Oct 2015 07:03:52 -0700</pubDate>
        <link>http://blog.boushley.net/2015/10/02/serverless-architecture-with-jaws/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2015/10/02/serverless-architecture-with-jaws/</guid>
        
        
        <category>js</category>
        
        <category>JAWS</category>
        
        <category>AWS</category>
        
      </item>
    
      <item>
        <title>Experimenting with ECMAScript 6 Default Function Parameters</title>
        <description>&lt;h2 id=&quot;where-were-at-now&quot;&gt;Where We’re At Now&lt;/h2&gt;

&lt;p&gt;ECMAScript 6 (ES6) added the ability to specify default parameters to functions, but we’ve
got a lot of code out there that already handles defaults, heck we even have a colloquially
named &lt;em&gt;default operator&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;Here’s the way I used to handle default parameters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works in most cases but gets problematic when &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsy values&lt;/a&gt;
are acceptable inputs. Then you need to explicitly check for &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; or check &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments.length&lt;/code&gt;;&lt;/p&gt;

&lt;h2 id=&quot;things-get-better&quot;&gt;Things Get Better&lt;/h2&gt;

&lt;p&gt;The new ES6 syntax looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much cleaner, especially as you add more parameters with their own defaults. However this just left me wondering about
how far you could take these default parameters. Are they bound when the function is defined, or when it is called? What
kind of expressions can you set as the value?&lt;/p&gt;

&lt;h2 id=&quot;es6-today&quot;&gt;ES6 Today&lt;/h2&gt;

&lt;p&gt;So the first place I looked was the &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt; &lt;a href=&quot;http://babeljs.io/repl/&quot;&gt;REPL&lt;/a&gt;. This is a great tool
that lets you see how the ES6 version of some code would be written in ES5. This is great for helping you understand how
things work, especially since the Babel team works extremely hard to produce javascript that follows the specification
exactly.&lt;/p&gt;

&lt;p&gt;If we drop our simple function into the REPL we get this as the output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That looks promising. This answered my first question, parameters are bound when the function is called, not when it is
defined. That’s super handy. This also handles falsy values porperly, good stuff.&lt;/p&gt;

&lt;p&gt;The way &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; is just sitting in there made me think we might be able to do a fairly complex expression here. So I tried
popping a function call or variable assignment in there. Things worked great. You  can call a function, you can set the
parameter to another variable, heck you can set a later parameter to the value of an earlier parameter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;side-note&quot;&gt;Side Note&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Babel has an additional mode called &lt;code class=&quot;highlighter-rouge&quot;&gt;High Compliancy&lt;/code&gt;. This adds some extra noise to the above example to handle 
temporal dead zones. Luckily we don’t have to worry about that with these examples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I also noticed that FireFox already has default parameters implemented. So I opened up FireFox’s developer console and
did similar tests. Everything worked just as you would expect based on the Babel code.&lt;/p&gt;

&lt;h2 id=&quot;the-spec&quot;&gt;The Spec&lt;/h2&gt;

&lt;p&gt;Just to be sure there wasn’t a bug in here I went ahead and dove into the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-function-definitions&quot;&gt;ES6 Spec for Function
Definitions&lt;/a&gt;. It looks like FireFox and
Babel got it right. Default parameters are late binding and allow for basically any expression.&lt;/p&gt;

&lt;p&gt;I’m glad we have Babel so we can use these great features now.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Sep 2015 19:03:52 -0700</pubDate>
        <link>http://blog.boushley.net/2015/09/19/ecmascript-6-default-parameters/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2015/09/19/ecmascript-6-default-parameters/</guid>
        
        
        <category>ES6</category>
        
        <category>js</category>
        
        <category>Experiments</category>
        
        <category>Spec Diving</category>
        
      </item>
    
      <item>
        <title>Fun with visibility and pseudo elements, and then IE</title>
        <description>&lt;h2 id=&quot;fun-with-visbility&quot;&gt;Fun with Visbility&lt;/h2&gt;

&lt;p&gt;What happens with nesting and visibility?&lt;/p&gt;

&lt;p&gt;By default when you make an element &lt;code class=&quot;highlighter-rouge&quot;&gt;visible: hidden;&lt;/code&gt; it becomes &lt;em&gt;hidden&lt;/em&gt; along with all of
the elements children. It doesn’t have to stop there though:&lt;/p&gt;

&lt;h3 id=&quot;hidden-parent-and-visible-child&quot;&gt;Hidden Parent and Visible Child&lt;/h3&gt;

&lt;p&gt;If you make an element explicitly visible it shows up, regardless of an ancestor elements visibility setting.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.w3.org/TR/CSS2/visufx.html#visibility&quot;&gt;specification for visbility&lt;/a&gt; explicitly calls out that (emphasis
added):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The generated box is invisible (fully transparent, nothing is drawn), but still affects layout.
&lt;strong&gt;Furthermore, descendants of the element will be visible if they have ‘visibility: visible’.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, lets see the basic setup:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden-parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;visible-child&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.hidden-parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.visible-child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the &lt;em&gt;glorious&lt;/em&gt; result here:&lt;/p&gt;

&lt;p data-height=&quot;200&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;QjNoZj&quot; data-default-tab=&quot;result&quot; data-user=&quot;boushley&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/boushley/pen/QjNoZj/&quot;&gt;QjNoZj&lt;/a&gt; by Aaron Boushley (&lt;a href=&quot;http://codepen.io/boushley&quot;&gt;@boushley&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This works in any browser you’re likely to work with. It is a cool tool, not something
I use all that often, but it is a nice tool to have around.&lt;/p&gt;

&lt;h3 id=&quot;hidden-parent-and-pseudo-elements&quot;&gt;Hidden Parent and Pseudo Elements&lt;/h3&gt;

&lt;p&gt;Alright, so what happens if we want to use a &lt;a href=&quot;http://www.w3.org/TR/2011/REC-CSS2-20110607/generate.html#before-after-content&quot;&gt;pseudo element&lt;/a&gt;
like &lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden-parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.hidden-parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.hidden-parent&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And again, the result:&lt;/p&gt;

&lt;p data-height=&quot;200&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;WQwmBr&quot; data-default-tab=&quot;result&quot; data-user=&quot;boushley&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/boushley/pen/WQwmBr/&quot;&gt;WQwmBr&lt;/a&gt; by Aaron Boushley (&lt;a href=&quot;http://codepen.io/boushley&quot;&gt;@boushley&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Works great, well for most of you it worked great. Unfortunately if you’re in IE it doesn’t work. I would show you a
screenshot, but it’s just blank. This holds for all IE versions I’ve been able to test, all the way up through IE 11.&lt;/p&gt;

&lt;p&gt;This one is a bummer, I was really excited when it worked so well in Chrome and FireFox, but IE dashed my hopes.&lt;/p&gt;

&lt;h3 id=&quot;who-cares&quot;&gt;Who Cares?&lt;/h3&gt;
&lt;p&gt;This may all seem really theoretical, but I discovered this as I was trying to build out an error display. There was an
error icon, the before pseudo element, and the error contents, the content of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.hidden-parent&lt;/code&gt;. The ask from the
designers was to have the messages hidden until certain interactions happened. I was able to get this working using just
html and css without the need for an additional element for the error display.&lt;/p&gt;

&lt;p&gt;You can see a rough version of it here. Works great, but to get IE support you need to avoid using the pseudo element.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;ZbWPgy&quot; data-default-tab=&quot;result&quot; data-user=&quot;boushley&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/boushley/pen/ZbWPgy/&quot;&gt;ZbWPgy&lt;/a&gt; by Aaron Boushley (&lt;a href=&quot;http://codepen.io/boushley&quot;&gt;@boushley&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Fri, 18 Sep 2015 19:03:52 -0700</pubDate>
        <link>http://blog.boushley.net/2015/09/18/nested-visibility-pseudo-elements-and-ie/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2015/09/18/nested-visibility-pseudo-elements-and-ie/</guid>
        
        
        <category>IE</category>
        
        <category>CSS</category>
        
      </item>
    
      <item>
        <title>Internet Explorer Tracking Protection and Shared CDNs</title>
        <description>&lt;h2 id=&quot;how-i-got-here&quot;&gt;How I Got Here&lt;/h2&gt;
&lt;p&gt;At work we recently released an &lt;a href=&quot;https://de.demo.extrahop.com/extrahop/&quot;&gt;online demo&lt;/a&gt; of our product. We were pretty
happy to get this out and there is an expanded version of the demo for the Enterprise Edition of our product. To see
this full demo you need to fill out a &lt;a href=&quot;http://www.extrahop.com/enterprise/start/&quot;&gt;form&lt;/a&gt;.  This all went great, until
about a day after launch we get an email from the CEO of our company talking about he and his wife were unable to use
the site in IE 11. I was pretty confident we had tested this, but the CEO was saying the site was broke… so I
started digging in.&lt;/p&gt;

&lt;p&gt;I checked IE 11 in a VM and things worked fine. Well that’s good and bad, at least I don’t look like a total idiot that
just didn’t test in even a modern browser. The down side is that now I have to figure out why it isn’t working in this
specific case. Eventually got dev console output in IE 11 and saw this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
SEC7114: A download in this page was blocked by Tracking Protection.  https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hmm, so “Tracking Protection” is blocking my jQuery from the Google CDN. What?!&lt;/p&gt;

&lt;h2 id=&quot;shared-cdns&quot;&gt;Shared CDNs&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/speed/libraries/devguide&quot;&gt;Google Hosted Libraries&lt;/a&gt; is a Shared CDN. Google is hosting 
a set of popular JavaScript libraries so that multiple sites can use them. They are not the only ones to offer a service 
like this, &lt;a href=&quot;http://www.asp.net/ajaxlibrary/cdn.ashx&quot;&gt;Microsoft&lt;/a&gt; and &lt;a href=&quot;http://cdnjs.com/&quot;&gt;cdnjs&lt;/a&gt; both have their own 
versions. Shared CDNs are a great idea, they allow for the benefits of caching on common files across multiple websites. 
With frameworks like jQuery being so &lt;a href=&quot;http://trends.builtwith.com/javascript/jQuery&quot;&gt;ubiquitous&lt;/a&gt; it’s fairly likely it 
may be cached before a user ever hits your site.&lt;/p&gt;

&lt;p&gt;Those are the up sides to a shared CDN, but back to the part where IE is “protecting” this browser so well that it can’t
use jQuery.&lt;/p&gt;

&lt;h2 id=&quot;alright-so-what-is-tracking-protection&quot;&gt;Alright, So What is “Tracking Protection”&lt;/h2&gt;
&lt;p&gt;After doing some digging it looks like in IE 9 this idea of
&lt;a href=&quot;http://windows.microsoft.com/en-us/internet-explorer/products/ie-9/features/tracking-protection&quot;&gt;Tracking Protection&lt;/a&gt;
was introduced. It isn’t turned on by default but after a couple clicks you can have you’re wonderful new Tracking 
Protection enabled. The default version of this is the “Personalized Tracking Protection List”. The way this works is 
that when IE detects the same script being loaded on multiple different sites it decides it must be tracking code 
(because what else would any set of sites want to share? right?) and marks it as probable tracking code.&lt;/p&gt;

&lt;p&gt;To be fair in the default mode this personalized list simply identifies these values and then lets the user decide 
whether to block or not. However this browser was running in the more aggressive mode where it just auto blocks these
scripts.  So there you go. IE blocks scripts that are shared by many sites. This is probably pretty effective (initially,
until real tracking companies with all their money just start sharding across multiple domains) but it also destroys the
idea of a shared CDN for common code like jQuery.&lt;/p&gt;

&lt;h2 id=&quot;side-note-foil-hat-time&quot;&gt;Side Note: Foil Hat Time&lt;/h2&gt;
&lt;p&gt;My initial reaction was that certainly since Microsoft has their own shared CDN for jQuery it would be whitelisted. Now 
I admit this blog post would be more fun if that were the case, but it looks like Microsoft doesn’t have any sites 
whitelisted. Their shared CDN is just as broken as Google’s shared CDN with Tracking Protection on.
&lt;img src=&quot;/images/ie-blocking-cdns.png&quot; alt=&quot;IE Blocking Shared CDN Files&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cdn-fallbacks&quot;&gt;CDN Fallbacks&lt;/h2&gt;
&lt;p&gt;So, here’s the thing. I knew I should be using a
&lt;a href=&quot;http://www.hanselman.com/blog/CDNsFailButYourScriptsDontHaveToFallbackFromCDNToLocalJQuery.aspx&quot;&gt;CDN fallback&lt;/a&gt; but
hadn’t put one in. I planned to have a fallback eventually, but I rationalized that the Google CDN never goes down so 
what would be the harm in just getting this out and worrying about a fallback later? I let my confidence in Google’s
infrastructure lull me into a sense of security. Well that was my mistake, Google’s infrastructure was fine, but this
“Tracking Protection” was blocking the CDN regardless.&lt;/p&gt;

&lt;h3 id=&quot;if-you-use-a-shared-cdn-you-should-be-using-a-fallback-for-your-cdn&quot;&gt;If you use a shared CDN you should be using a fallback for your CDN.&lt;/h3&gt;

&lt;h2 id=&quot;more-protection&quot;&gt;More “Protection”&lt;/h2&gt;
&lt;p&gt;We got a fallback in place for the Google CDN and now the page works fine with Tracking Protection in full swing. 
However, there are still problems with the page that we can’t easily resolve. We use &lt;a href=&quot;https://typekit.com/&quot;&gt;Typekit&lt;/a&gt;
for our fonts and their loading script is blocked by Tracking Protection. In the case of Typekit it’s actually worse, 
since there isn’t an easy way to fallback. The &lt;a href=&quot;https://www.google.com/fonts&quot;&gt;Google Fonts&lt;/a&gt; also has this same problem. 
It’s disappointing that IE has this feature so easily accessible that really destroys sharing of resources on the web.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Aug 2014 19:03:52 -0700</pubDate>
        <link>http://blog.boushley.net/2014/08/07/internet-explorer-tracking-protection-and-shared-cdns/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2014/08/07/internet-explorer-tracking-protection-and-shared-cdns/</guid>
        
        
        <category>IE</category>
        
        <category>Shared CDN</category>
        
      </item>
    
      <item>
        <title>Node.js Standard Input Oddities</title>
        <description>&lt;h2 id=&quot;digging-to-find-the-problem&quot;&gt;Digging To Find the Problem&lt;/h2&gt;
&lt;p&gt;At work recently we were doing our best to automate some of the authoring workflow on our new site (that’s based on 
the &lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt; static site generator). While doing this we were writing a simple Python 
script that automated the steps of creating a file, running the build and saving the files.&lt;/p&gt;

&lt;p&gt;We ran into some odd behavior though after running our build and then asking for further input from stdin. After digging 
into the problem we eventually discovered that it only happened after running one of our tasks that uses 
&lt;a href=&quot;https://github.com/sindresorhus/grunt-shell&quot;&gt;grunt-shell&lt;/a&gt; although we discovered that setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; option to 
&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; for the command configuration solved our problem.&lt;/p&gt;

&lt;p&gt;From this my initial thought was that grunt-shell must not be cleaning something up when it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;process.stdin&lt;/code&gt;. So I 
dug into grunt-shell and discovered that as far as I could tell things were being done correctly. I tried adding some 
explicit calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;process.stdin.pause();&lt;/code&gt; since there was a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;process.stdin.resume();&lt;/code&gt; but to no avail. Alright, 
time to boil this down to a simpler repro.&lt;/p&gt;

&lt;h2 id=&quot;boiling-down-to-the-minimal-case&quot;&gt;Boiling Down to the Minimal Case&lt;/h2&gt;
&lt;p&gt;First I found that if I ran similar commands to what grunt-shell used in a node script (outside of grunt) I could 
produce similar behavior. So then I got it down to just a couple lines in files, and finally a single command, no files 
necessary.&lt;/p&gt;

&lt;p&gt;Alright, to get things started lets check out the node version:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
bash-3.2$ node -v
v0.10.30
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the first step on this path is to show that node itself can work in a situation where stdin is needed just fine:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
bash-3.2$ read -p &quot;Works? (y/N) &quot; yn &amp;amp;&amp;amp; node -e &quot;console.log(&#39;hi&#39;);&quot; &amp;amp;&amp;amp; read -p &quot;Works? (y/N) &quot; yn
Works? (y/N) y
hi
Works? (y/N) y
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yup, we were asked if things worked twice and I could respond “yes” both times. Great, so now lets do something similar 
to what grunt-shell was doing, using &lt;code class=&quot;highlighter-rouge&quot;&gt;process.stdin.resume()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
bash-3.2$ read -p &quot;Works? (y/N) &quot; yn &amp;amp;&amp;amp; node -e &quot;process.stdin.resume(); process.stdin.pause();&quot; &amp;amp;&amp;amp; read -p &quot;Works? (y/N) &quot; yn
Works? (y/N) y
Works? (y/N) bash: read: read error: 0: Resource temporarily unavailable
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that’s some weird behavior. I got to say yes it was working the first time, but the second time bash is telling us that stdin
(file descriptor 0) is temporarily unavailable. Huh, so are there other things that cause this same behavior with stdin? 
Maybe if we use the &lt;a href=&quot;http://blog.nodejs.org/2012/12/20/streams2/&quot;&gt;newer stream model&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
bash-3.2$ read -p &quot;Works? (y/N) &quot; yn &amp;amp;&amp;amp; node -e &quot;process.stdin.on(&#39;readable&#39;, function () {}); process.stdin.removeAllListeners(&#39;readable&#39;);&quot; &amp;amp;&amp;amp; read -p &quot;Works? (y/N) &quot; yn
Works? (y/N) y
Works? (y/N) bash: read: read error: 0: Resource temporarily unavailable
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dang, still leaving stdin in a bad state. Now it’s entirely possible I’m just not cleaning something up properly with 
these so I tried to narrow it down a bit further. Let’s try something that shouldn’t really be intrusive at all:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
bash-3.2$ read -p &quot;Works? (y/N) &quot; yn &amp;amp;&amp;amp; node -e &quot;process.stdin.setEncoding(&#39;utf8&#39;)&quot; &amp;amp;&amp;amp; read -p &quot;Works? (y/N) &quot; yn
Works? (y/N) y
Works? (y/N) bash: read: read error: 0: Resource temporarily unavailable
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ug! Still busted. Interesting. In doing some searching I discovered
&lt;a href=&quot;https://github.com/joyent/node/issues/7481&quot;&gt;an issue&lt;/a&gt; that some people were seeing odd behaviors from just referencing 
&lt;code class=&quot;highlighter-rouge&quot;&gt;process.stdin&lt;/code&gt;. I thought “There’s no way just referencing stdin could cause this problem.”, but hey it’s worth a try:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
bash-3.2$ read -p &quot;Works? (y/N) &quot; yn &amp;amp;&amp;amp; node -e &quot;process.stdin;&quot; &amp;amp;&amp;amp; read -p &quot;Works? (y/N) &quot; yn
Works? (y/N)
Works? (y/N) bash: read: read error: 0: Resource temporarily unavailable
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For reals!? Just referencing &lt;code class=&quot;highlighter-rouge&quot;&gt;process.stdin&lt;/code&gt; puts node into a state where stdin won’t be released until things are well 
and done.&lt;/p&gt;

&lt;h2 id=&quot;nodejs-is-hanging-onto-stdin&quot;&gt;Node.js Is Hanging Onto stdin&lt;/h2&gt;
&lt;p&gt;Alright, so if you touch &lt;code class=&quot;highlighter-rouge&quot;&gt;process.stdin&lt;/code&gt; in any way node.js will hang onto that file descriptor until the process is 
completely finished. I can’t seem to find a way to get node to clean things up once stdin has been used. I hope there’s 
a workaround, but I haven’t found it, if you have a workaround leave a comment. I also did some searching through the
open issues on the node repository, and couldn’t find anything quite like this, so I opened a
&lt;a href=&quot;https://github.com/joyent/node/issues/8083&quot;&gt;new issue&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Aug 2014 19:32:59 -0700</pubDate>
        <link>http://blog.boushley.net/2014/08/05/node-dot-js-standard-input-oddities/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2014/08/05/node-dot-js-standard-input-oddities/</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>ElasticSearch Postman Queries</title>
        <description>&lt;p&gt;I was experimenting with getting &lt;a href=&quot;http://www.elasticsearch.org/&quot;&gt;ElasticSearch&lt;/a&gt; up and running. In doing so I was using 
the Chrome &lt;a href=&quot;http://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; extension to make requests against my local instance of ElasticSearch 
and experiment with the API.&lt;/p&gt;

&lt;p&gt;Here are the postman request collections that I used. This first one
&lt;a href=&quot;/resources/postman/ElasticSearchLocalhost.json.postman_collection&quot;&gt;Localhost Specific Request Collection&lt;/a&gt; as the title 
states is specific to localhost and to port 9200. However I made another collection with the same requests that uses a 
&lt;a href=&quot;http://www.getpostman.com/docs/environments&quot;&gt;Postman environment&lt;/a&gt; to allow hitting an ElasticSearch cluster not on 
localhost. This &lt;a href=&quot;/resources/postman/ElasticSearch.json.postman_collection&quot;&gt;Request Collection&lt;/a&gt; allows you to setup a 
Postman environment with a host and port property that will change where the requests go. For more information about 
Postman environments see the &lt;a href=&quot;http://www.getpostman.com/docs/environments&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want more information on setting up ElasticSearch check out their
&lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/intro.html&quot;&gt;Getting Started Guide&lt;/a&gt;. Red Badger has 
a good blog post on
&lt;a href=&quot;http://red-badger.com/blog/2013/11/08/getting-started-with-elasticsearch/&quot;&gt;Getting Started with ElasticSearch&lt;/a&gt; if you 
want more instruction on getting up and running.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Jul 2014 11:48:33 -0700</pubDate>
        <link>http://blog.boushley.net/2014/07/26/elasticsearch-postman-queries/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2014/07/26/elasticsearch-postman-queries/</guid>
        
        
        <category>ElasticSearch</category>
        
        <category>Postman</category>
        
      </item>
    
      <item>
        <title>IE Bug with Pseudo Elements and Nested Visibility</title>
        <description>&lt;p&gt;Recently I was working on adding some styling in an app and I was happy to discover that the
&lt;a href=&quot;http://www.w3.org/TR/CSS2/visufx.html#visibility&quot;&gt;CSS spec for visibility&lt;/a&gt; allows for nested elements to declare 
themselves visible.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The generated box is invisible (fully transparent, nothing is drawn), but still affects layout. Furthermore,
descendants of the element will be visible if they have &#39;visibility: visible&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This came in handy, allowing me to make a container hidden until a specific element was focused, but then allowing me to 
make an icon within that container visible. As I was cleaning this up further I decided the icon really didn’t have any 
semantic meaning so I shifted it into a CSS after pseudo element.&lt;/p&gt;

&lt;p&gt;Things continued working and I was excited at how cleanly things had turned out. I had nice looking functionality 
without any javascript, and the html had stayed remarkably clean. That’s when IE struck!&lt;/p&gt;

&lt;p&gt;Turns out that IE supports pseudo elements fine, and it supports nested visibility just fine, but it doesn’t support 
setting a pseudo element to visible when the element it is being added to is hidden. As far as I can tell from the 
&lt;a href=&quot;http://www.w3.org/TR/css3-selectors/#pseudo-elements&quot;&gt;multiple&lt;/a&gt;
&lt;a href=&quot;http://www.w3.org/TR/2009/CR-CSS2-20090908/selector.html#before-and-after&quot;&gt;places&lt;/a&gt;
&lt;a href=&quot;http://www.w3.org/TR/2009/CR-CSS2-20090908/generate.html&quot;&gt;pseudo elements&lt;/a&gt; are discussed in the specs they should be 
treated the same as any other child, and it appears that that is how Chrome, FireFox and Opera have interpretted the 
spec as well. However IE, even through IE 11, does not render this the same. I created
&lt;a href=&quot;http://jsfiddle.net/boushley/3d97K/4/&quot;&gt;this jsfiddle&lt;/a&gt; which demonstrates the behavior. In Chrome and FireFox you see 
the BEFORE and AFTER content, but in IE you only see the nested child content. I have some screenshots of this
&lt;a href=&quot;http://www.browserstack.com/screenshots/61b827cbc479d2c792e148e2065456abcf1a7f0d&quot;&gt;on browserstack&lt;/a&gt;. There do appear to 
be
&lt;a href=&quot;http://stackoverflow.com/questions/17530947/ie10-visibilityvisible-on-before-pseudo-element-of-visibilityhidden-eleme&quot;&gt;some other people&lt;/a&gt;
that have run into this issue as well, but apparently not too many.&lt;/p&gt;

&lt;p&gt;In the end I was able to work around this by making all of the children of my parent container &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility: hidden;&lt;/code&gt; and 
then specifically making the pseudo element visible. This didn’t clutter my markup since I was working on a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 
element already. So in the end I had a reasonable workaround with hiding all the children, but that wouldn’t work in the 
scenario my jsfiddle outlines, since the text that is a direct child of the container element would not be hidden.&lt;/p&gt;

&lt;p&gt;Oh IE, will you ever be consistent?&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Jul 2014 17:22:59 -0700</pubDate>
        <link>http://blog.boushley.net/2014/07/09/ie-bug-with-pseudo-elements-and-nested-visibility/</link>
        <guid isPermaLink="true">http://blog.boushley.net/2014/07/09/ie-bug-with-pseudo-elements-and-nested-visibility/</guid>
        
        
        <category>css</category>
        
        <category>IE</category>
        
        <category>bugs</category>
        
      </item>
    
  </channel>
</rss>
